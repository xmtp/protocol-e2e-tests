# syntax=docker/dockerfile:1.6

########################
# Build stage
########################
FROM rust:1-bookworm AS builder
WORKDIR /src

# Build deps (adjust if needed)
RUN apt-get update \
 && apt-get install -y --no-install-recommends pkg-config libssl-dev ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# Copy the monorepo (build context = repo root)
COPY . .

# Force a fresh compile if needed by toggling this arg at build time
ARG FORCE_REBUILD=0
RUN echo "FORCE_REBUILD=$FORCE_REBUILD"

# Optional caching (BuildKit)
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/src/target \
    cargo build --release --package xdbg

########################
# Runtime stage
########################
# Use trixie (glibc 2.38+) to satisfy the binary's requirement
FROM debian:trixie-slim

# Put DBs/logs in a predictable place; mount this if you want persistence
WORKDIR /work

# Minimal runtime deps for your runner + debugging
RUN apt-get update \
 && apt-get install -y --no-install-recommends tini bash ca-certificates procps libssl3 \
 && rm -rf /var/lib/apt/lists/*

# Bring in the compiled binary and runner script
COPY --from=builder /src/target/release/xdbg /usr/local/bin/xdbg
COPY xmtp_debug/newrunner.sh /usr/local/bin/newrunner.sh
RUN chmod +x /usr/local/bin/xdbg /usr/local/bin/newrunner.sh

ENV RUST_LOG=info

# tini as PID 1; newrunner.sh exits -> container exits
ENTRYPOINT ["/usr/bin/tini", "--", "/usr/local/bin/newrunner.sh"]
